{
  "domain-api/common-tasks/index.html": {
    "href": "domain-api/common-tasks/index.html",
    "title": "Common Tasks | ERP.net Developer Docs",
    "keywords": "Common Tasks This section includes examples of common tasks performed with the Domain API. Master/Detail Attributes Register Trusted Application Retrieve Products Working with documents CONTAINS Using contains filter function for string attribute: General_Contacts_Parties?$top=5&$filter=contains(PartyCode,'30') Try it Yourself Using contains filter function for multi-language attribute: General_Contacts_Parties?$top=5&$filter=contains(PartyName,'Ivan') Try it Yourself IN OPERATOR Not every attribute in ERP.net supports in filter operator. Generally all navigation properties support in , some enum attributes and occasionaly some other attributes. This information you can find in the Domain Model Reference . Using in for Id attribute: General_Products_Products?$top=10&$filter=Id in (edf2bd2a-7e4d-e111-a06c-00155d00050a, cf728601-1fd5-4853-ab23-01deeee7d038) Try it Yourself Using in for Document State attribute: Crm_Sales_SalesOrders?$top=10&$filter=State in ('FirmPlanned', 'Released')&$select=State Try it Yourself Using in for DocumentType navigation property: Crm_Sales_SalesOrders?$top=10&$select=DocumentType&$filter=DocumentType in ('General_DocumentTypes(de4913f3-962a-4289-a0f3-01bc2c1da21d)', 'General_DocumentTypes(a8b99412-3348-4c12-abdf-1a6a15ab5449)') Try it Yourself Passing inherited entity uri-s (Document.ToParty is of type General_Contacts_Party. The types General_Contacts_Company and General_Contacts_Person are inherited by General_Contacts_Party): Crm_Sales_SalesOrders?$top=10&$filter=ToParty in ('General_Contacts_Persons(2e97f255-f410-4925-8c51-211c8eaa18b8)', 'General_Contacts_Companies(bc60d0bc-2804-4e3c-b355-04184aef5505)') Note: if you pass uri-s to General_Contacts_Party entity the query can be optimized and will be faster than specifying inherited entity uri-s. Try it Yourself CAST The following uri returns the parent document of a specified sales order cast as Crm_Presales_Offer. Note: The type must be specified with the namespace which for all entities is Erp. Crm_Sales_SalesOrders(11217345-3659-43be-a85d-005eaaa3aaac)/Parent/Erp.Crm_Presales_Offer SELECT DEFAULT By default only system attributes are present in the JSON result. The Id attribute, custom properties and calculated attributes are not present. Use the keyword default in $select clause to include all default attributes. To include custom properties and calculated attributes they must be specified explicitly in $select clause. General_Products_Products?$top=1&$select=default,CalculatedAttribute_name NESTED EXPAND Crm_Sales_SalesOrders(59098bcf-f331-478f-91c2-f5520590f534)?$expand=Lines($expand=Product($select=Codes,Name,PartNumber;$expand=Codes($select=Code))) EXPAND $ref - returns the items as links Crm_Sales_SalesOrders(59098bcf-f331-478f-91c2-f5520590f534)?&$expand=Lines/$ref FILTER BY DATE Crm_Sales_SalesOrders?$top=2&$filter=DocumentDate eq 2012-01-01T00:00:00Z FILTER BY Custom Property General_Products_Products?$top=10&$select=CustomProperty_color&$filter=CustomProperty_color eq 'blue' FILTER BY Quantity and Amount Crm_Sales_SalesOrderLines?$top=10&$filter=QuantityValue ge 3 and QuantityValue le 5 and LineAmountValue ge 15.45&$select=Quantity Request COUNT applying filter Crm_Invoicing_Invoices/$count?$filter=DocumentDate eq 2020-03-23T00:00:00Z This request returns the number of invoices for the specified date. See http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#_Toc31361043 Crm_Sales_SalesOrderLines/$count?$filter=SalesOrder/Void eq false and SalesOrder/State ge 'Released' and Product eq 'General_Products_Products(35d5bcb9-0881-4bc8-bfe4-84fb874d4626)' This request returns the number of released sales order lines for a given product. Using $top, $skip and $count Crm_Sales_SalesOrderLines?$filter=SalesOrder/Void eq false and SalesOrder/State ge 'Released'&$top=10&$skip=120&$count=true The $count=true query option specifies that the total number of rows for the specified filter will be included in the result along with the data. UPDATE PRODUCT PATCH ~/General_Products_Products(59098bcf-f331-478f-91c2-f5520590f534) { \"@odata.type\": \"#Erp.General_Products_Product\", \"ABCClass\": \"A\", \"StandardLotSizeBase\": { \"Value\": 3.45, \"Unit\": \"бр\" }, \"MeasurementUnit@odata.bind\": \"https://mycompany.com/api/domain/odata/General_MeasurementUnits(5c5e77ce-60bb-4338-abd0-3a2acb27ff93)\" } FILTER BY DOCUMENT STATE Crm_Sales_SalesOrders?$top=1&$filter=State ge Erp.General_DocumentState'Released' FILTER BY MULTIPLE DOCUMENT TYPES Crm_Sales_SalesOrders?$top=2&$filter=DocumentType eq 'General_DocumentTypes(f8a93d3a-8cf3-4a09-9d45-667d664cb98d)' and DocumentType eq 'General_DocumentTypes(f8a93d3a-8cf3-4a09-9d45-667d664cb98e)' and DocumentType eq 'General_DocumentTypes(f8a93d3a-8cf3-4a09-9d45-667d664cb98f)' FILTER BY MasterDocument with Sales Order URI Crm_Sales_SalesOrders?$top=2&$filter=MasterDocument eq 'Crm_Sales_SalesOrders(70ef9b04-d843-df11-a1e1-0018f3790817)' CHANGE DOCUMENT STATE POST ~/Crm_Sales_SalesOrders(59098bcf-f331-478f-91c2-f5520590f534)/ChangeState { \"newState\" : \"FirmPlanned\", \"userStatus\": {\"@odata.id\": \"General_DocumentTypeUserStatuses(1ee1249e-4ef5-46b4-8409-26b2130d09c7)\"} } MAKE DOCUMENT VOID POST ~/Crm_Sales_SalesOrders(11217345-3659-43be-a85d-005eaaa3aaac)/MakeVoid { \"reason\" : \"test api method\", \"voidType\": \"VoidDocument\" }"
  },
  "domain-api/common-tasks/master-detail-attributes.html": {
    "href": "domain-api/common-tasks/master-detail-attributes.html",
    "title": "Master/Detail Attributes | ERP.net Developer Docs",
    "keywords": "Master/Detail Attributes Description There are many entity types in ERP.net which are in master/detail relationship. For example, the Sales Orders entity type is master to the Sales Order Lines entity type. Following the relationship between their respective entity types, some attributes (or references) might be in master/detail relationship. For example, the SalesOrder.Store and SalesOrderLine.LineStore are in master/detail relationship. For in-depth information about master/detail attribute relationship, refer to the technical documentation . Very simplified version of the story from dev perspective: The detail attribute is the important one. It is considered by the business logic. The master attribute is used mainly for at-a-glance user information. The master attribute contains value only when the value (of the detail attribute) for all lines is the same. Otherwise, it is NULL. The detail attribute generally should be a required (not-NULL) attribute. However, there are exceptions, so check the model docs to be sure. Best practices When creating data Set the value of the detail attribute for each line, according to your business requirements. For the master attribute: If ALL detail lines have the same value for the detail attribute, set that value. Otherwise (if there are different values) - set NULL. When consuming data Use the detail attribute value to properly implement your business logic. If you are referring to the value of the master attribute, be sure to properly handle the possible NULL values. Examples All lines have the same value In this example, the master attribute has a value, because it is the same for all lines. Entity Attribute Value Sales Order 00596 Store Main Sales Order 00596 - Line 01 Line Store Main Sales Order 00596 - Line 02 Line Store Main Sales Order 00596 - Line 03 Line Store Main Different values on the lines In this example, the master attribute is NULL, because there are lines with different values. Entity Attribute Value Sales Order 00597 Store NULL Sales Order 00597 - Line 01 Line Store Main Sales Order 00597 - Line 02 Line Store Remote 01 Sales Order 00597 - Line 03 Line Store Main"
  },
  "domain-api/common-tasks/register-trusted-app.html": {
    "href": "domain-api/common-tasks/register-trusted-app.html",
    "title": "Register Trusted Application | ERP.net Developer Docs",
    "keywords": "Register Trusted Application In this topic, you register an app in an ERP instance so the ERP.net identity server can provide authentication and authorization services for your application and its users. Each application that uses ERP.net APIs needs to be registered. Whether it's a client application like a web or mobile app, or it's a web API that backs a client app, registering it establishes a trust relationship between your application and the ERP instance. Register an application Registering your application establishes a trust relationship between your app and the ERP.net database instance. That means that your database trusts the application. We'll show how to register an application manually, using the Domain API Query Tool. Follow these steps to create the app registration: Sign in to your ERP instance and open the Domain API Query Tool. Every ERP.net database has it's own query tool on the Domain API site. The Domain Api site is usually hosted on address https://{COMPANY}.my.erp.net/api and the query tool is on https://{COMPANY}.my.erp.net/api/domain/query In this example we'll use the DEMODB ERP.net instance query tool: https://demodb.my.erp.net/api/domain/query ⚠️ You need to be a database administrator in order to be able to register a new trusted application. If the application is confidential , we need to prepare an application secret. Use this endpoint to get the application secret hash (Replace mysecret with your secret): https://demodb.my.erp.net/sys/tools/sha256?secret=mysecret In the query tool we'll create a new record for System.Security.TrustedApplications entity. Register interactive confidential application Query : Systems_Security_TrustedApplications Type : POST Body : { \"ApplicationUri\": \"MYDEMOCLIENT\", \"Name\": \"MY DEMO CLIENT\", \"ClientType\": \"Confidential\", \"ApplicationSecretHash\": \"T/AGymuI51LwjLeIFxRQXOs9IHnupDKs/ajhWODR2C4=\", \"ImpersonateAsCommunityUserAllowed\": true, \"ImpersonateAsInternalUserAllowed\": true, \"ImpersonateLoginUrl\": \"http://localhost:5080/myapp/signin-oidc\", \"ImpersonateLogoutUrl\": \"http://localhost:5080/myapp/\", \"SystemUserAllowed\": false } ApplicationUri is the unique name that identifies the application. This is the client_id in the OAuth terminology. Name is the display name of the application. ClientType - Confidential or Public. ApplicationSecretHash a hash of the application secret - previously created using https://demodb.my.erp.net/sys/tools/sha256?secret=mysecret tool. ImpersonateAsCommunityUserAllowed must be true if your application will work with community users. Community users are users that do not have access to system resources. They are usually customers of the company that owns the ERP.net database instance. ImpersonateAsInternalUserAllowed must be true if internal users will use the application. ImpersonateLoginUrl is the url that receives the authorization code. When the user loads the application in the browser, if sign in is required, the browser is redirected to ERP.net Identity Server login page. After successful login the browser is redirected to ImpersonateLoginUrl providing the authorization_code through code url parameter. This code is used by the application to request an access_code that is used to gain access to ERP.net server resources. ImpersonateLogoutUrl is the url that is loaded after the user is logged out from the identity server and \"Return to app\" button is clicked. SystemUserAllowed specifies if the application can act as a service application that is impersonated as specific user. Register interactive public application Query : Systems_Security_TrustedApplications Type : POST Body : { \"ApplicationUri\": \"MYDEMOCLIENT\", \"Name\": \"MY DEMO CLIENT\", \"ClientType\": \"Public\", \"ImpersonateAsCommunityUserAllowed\": true, \"ImpersonateAsInternalUserAllowed\": true, \"ImpersonateLoginUrl\": \"http://localhost:5080/myapp/signin-oidc\", \"ImpersonateLogoutUrl\": \"http://localhost:5080/myapp/\", \"SystemUserAllowed\": false } Register service application Query : Systems_Security_TrustedApplications Type : POST Body : { \"ApplicationUri\": \"MYSERVICEDEMOCLIENT\", \"Name\": \"Service Demo Client\", \"ApplicationSecretHash\": \"T/AGymuI51LwjLeIFxRQXOs9IHnupDKs/ajhWODR2C4=\", \"ClientType\": \"Confidential\", \"SystemUserAllowed\": true, \"SystemUser\": { \"@odata.id\": \"Systems_Security_Users(cc314327-3d04-477f-ac53-cde19d8350e9)\" } } SystemUser is the user for the service application."
  },
  "domain-api/common-tasks/retrieve-products.html": {
    "href": "domain-api/common-tasks/retrieve-products.html",
    "title": "Retrieve Products | ERP.net Developer Docs",
    "keywords": "Retrieve Products The following query: Retrieves 10 products, without any order Filters by: Active = true Selects the following attributes: Id - the unique Id of the product. Part Number - the product code. Name - the multi-language product name. ProductGroup - reference to the Product Group containing the product. StandardPricePerLot - Amount object, containing the standard price. Description - textual description of the product. This description is clear text and does not support any formatting. There is also Description_Html attribute, which can be used to contain description with HTML formatting. MeasurementUnit - reference to measurement units. This is the default sales measurement unit of the product. https://demodb.my.erp.net/api/domain/odata/General_Products_Products?$top=10&$filter=Active%20eq%20true&$select=CatalogDescriptionHtml,Description,Id,MeasurementUnit,Name,PartNumber,ProductGroup,StandardPricePerLot You can edit the query in the Query Builder: https://demodb.my.erp.net/api/domain/querybuilder#General_Products_Products?$top=10&$filter=Active%20eq%20true&$select=CatalogDescriptionHtml,Description,Id,MeasurementUnit,Name,PartNumber,ProductGroup,StandardPricePerLot"
  },
  "domain-api/common-tasks/working-with-documents.html": {
    "href": "domain-api/common-tasks/working-with-documents.html",
    "title": "Working with documents | ERP.net Developer Docs",
    "keywords": "Working with documents See Documents on technical documentation. Retrieving and updating documents is the same as any other entity in the domain. However there are some specific rules that apply only to documents. For example documents on state Released or above can not be modified directly. They must be modified with adjustment documents . Another important attribute of the documents that can not be modified with simple PATCH request is State . The examples below show some tasks related to documents. Create Document Document can be created only by specifying the required properties. Other properties will be filled by it's constant default value or it's LateDefault expression. If Front-End model is used in API Transaction dependent property values are recalculated upon property change. For example in SalesOrderLine line.ProductDescription is set to line.Product.Name when line.Product changes. In the example bellow a new SalesOrder is created with one SalesOrderLine. Note that measurement units and currencies are specified before passing Quantity or Amount values. This is required because the quantity or amount contains the code of the measurement unit or currency. POST ~/Crm_Sales_SalesOrders { \"DocumentType\": { \"@odata.id\": \"General_DocumentTypes(469b67b1-8b4b-4fb4-9d97-20c96105a85a)\" }, \"EnterpriseCompany\": { \"@odata.id\": \"General_EnterpriseCompanies(b0e80577-fbbe-4c9b-811e-20b6c6dd465f)\" }, \"Customer\": { \"@odata.id\": \"Crm_Customers(15f2640f-f374-4017-ae2d-d2a41535f054)\" }, \"DocumentCurrency\": { \"@odata.id\": \"General_Currencies(3187833a-d3c1-4804-bfc0-e17e6aee3069)\" }, \"Lines\": [ { \"Product\": { \"@odata.id\": \"General_Products_Products(81d38b50-fd06-e611-8292-b31071e2ee7f)\" }, \"QuantityUnit\": { \"@odata.id\": \"General_MeasurementUnits(7dbe6d6a-22ef-4c2f-a798-054bc2d13c8b)\" }, \"Quantity\": { \"Value\": 1, \"Unit\": \"pcs\" }, \"UnitPrice\": { \"Value\": 20, \"Currency\": \"BGN\" } } ] } Change Document State HTTP C# POST ~/Crm_Sales_SalesOrders(59098bcf-f331-478f-91c2-f5520590f534)/ChangeState { \"newState\" : \"FirmPlanned\", \"userStatus\": {\"@odata.id\": \"General_DocumentTypeUserStatuses(1ee1249e-4ef5-46b4-8409-26b2130d09c7)\"} } Make Document Void HTTP C# POST ~/Crm_Sales_SalesOrders(11217345-3659-43be-a85d-005eaaa3aaac)/MakeVoid { \"reason\" : \"test api method\", \"voidType\": \"VoidDocument\" } Recalculate Document This method is used to recalculate some document details such as Document Amounts (like VAT), Bonus Programs etc. It make sense only in the context of Front-End transaction because the recalculated changes remain only in memory. They must be commited to the database with a separate call to EndTransaction{commit=true}. HTTP C# POST ~/Crm_Sales_SalesOrders(11217345-3659-43be-a85d-005eaaa3aaac)/Recalculate Create Adjustment Documents Released documents can be modified only with adjustment documents. The API provides a convenient method to create adjustment documents: CreateAdjustmentDocuments. The method requires TransactionId in the request header. The method creates adjustment documents for modified released documents. The adjustment documents are created in separate transaction and their state is changed to 'Adjustment'. The method does not commit or rollback the current front-end transaction. HTTP C# // Begin a front-end transaction POST ~/BeginTransaction { \"model\": \"frontend\" } // The returned transaction id must be set in the request header for each subsequent query. The header name is TransactionId. // Update some sales order lines. PATH ~/Crm_Sales_SalesOrderLines(34217345-3659-43be-a85d-005eaaa3aaac) TransactionId: xxxx { \"Quantity\": {\"Value\": 5.0, \"Unit\": \"PCE\"} } // Update another line. PATH ~/Crm_Sales_SalesOrderLines(65217345-3659-43be-a85d-005eaaa3aaac) TransactionId: xxxx { \"Quantity\": {\"Value\": 15.0, \"Unit\": \"PCE\"} } // Call CreateAdjustmentDocuments to create the adjustment documents and apply the changes to the original document. // Adjustment documents will be created for all modified released documents in the current transaction. POST ~/CreateAdjustmentDocuments TransactionId: xxxx // End the transaction without committing because updating released document directly is not allowed. POST ~/EndTransaction TransactionId: xxxx { \"commit\": false }"
  },
  "domain-api/complex-types/amount.html": {
    "href": "domain-api/complex-types/amount.html",
    "title": "Amount (Complex value) | ERP.net Developer Docs",
    "keywords": "Amount (Complex value) The ERP domain model declares a special type for amount (currency) properties. The amount is represented by value and currency. Properties Name Type Description Currency String The currency of the amount represented by it's sign. Value Decimal The value of the amount. Domain API Example: { \"LineAmount\": { \"Value\": \"3.55\", \"Currency\": \"USD\" } } Note Because Amount is odata complex object it can not participate in uri $filter query parameter. To filter by Amount or Quantity properties you can use the following: ~/Logistics_Inventory_StoreTransactionLines?$filter=QuantityValue ge 5.555 ~/Crm_Sales_SalesOrderLines?$filter=LineAmountValue ge 5.555"
  },
  "domain-api/complex-types/custom-property-value.html": {
    "href": "domain-api/complex-types/custom-property-value.html",
    "title": "Custom Property Value | ERP.net Developer Docs",
    "keywords": "Custom Property Value Custom Properties (also called Custom Attributes in the domain terminology) are user-defined attributes, which can supplement the predefined system attributes. Definition of а Custom Property For reference information about the definition of the custom properties, see General.CustomProperties Entity . Here are some highlights for the definition record: EntityName contains the name of the entity, for which the property is defined. You can find the entity name for each entity in the model documentation. For example, the entity name for Crm.Customers Entity is \"Crm_Customers\" (check it out in the link - see the tag line under the entity name). LimitToAllowedValues - this defines whether the property is free text or is limited to a list of allowed values. AllowedValuesEntityName - specifies that the allowed values are retrieved from the specified entity. When this is NULL, the allowed values are retrieved from General.CustomPropertyAllowedValues Entity . Data type and values In the Domain API, the custom properties are properties of type General_CustomPropertyValue. The API name of the custom property starts with 'CustomProperty_' followed by the user defined property code. Note Properties with Code, which does not conform to the specification for identifier name, might not be accessible through the API. See Identifier Name Specification . Each database contains different custom properties and that is why each database have different EDM model ($metadata). Note If a user creates new custom property in the database this custom property is not automatically shown in Domain API. This is because the Domain API caches all repositories and their attributes. To refresh the cached attributes you must call the ~/domain/reset endpoint. Example: https://demodb.my.erp.net/api/domain/reset Composition of the CustomPropertyValue type Name Type Description Value String The short value. This is the actual value of the custom property. Description MultilanguageString This is long, descriptive, multi-language value of the custom property. Can be null. ValueId Guid The Id of the entry represented by the property value. It's the id of the allowed value. Can be null. Example \"CustomProperty_color\": { \"Value\": \"аpple\", \"ValueId\": \"5263a2d3-88b0-41db-adae-31c76135719e\", \"Description\": { \"EN\": \"The Apple.\", \"DE\": \"Die Apfel.\" } } Note To filter by Custom Property you must use only the short value (only eq is supported): General_Products_Products?$top=10&$select=CustomProperty_color&$filter=CustomProperty_color eq 'apple'"
  },
  "domain-api/complex-types/index.html": {
    "href": "domain-api/complex-types/index.html",
    "title": "Complex types | ERP.net Developer Docs",
    "keywords": "Complex types Complex types are used in OData to encapsulate richer data types for properties. Complex types are a composition of properties. ERP.net utilizes the following complex types: Amount Quantity CustomPropertyValue MultilanguageString"
  },
  "domain-api/complex-types/multi-language-string.html": {
    "href": "domain-api/complex-types/multi-language-string.html",
    "title": "Multilanguage string (Complex value) | ERP.net Developer Docs",
    "keywords": "Multilanguage string (Complex value) Some text properties support value in more than one language. This properties are of multi-language string type. The multi-language string can store many language strings, indexing them by language key. The language key is a CultureInfo two letter ISO language name, like \"en\", \"de\", etc. For example, the name of a product is a data attribute, which can simultaneously contain translation of the product name in many languages. When you retrieve the value of this attribute with the Domain API, you get values similar to: { \"en\": \"Apple\", \"de\": \"Apfel\" } All translations are a single value All translations in a multi-language string are treated as a single value. You cannot change only one language pair - all pairs are updated simultaneously. The client applications are responsible for managing all language pairs. Filtering The equality comparison for multi-language string is ambiguous. The APIs generally do not support direct equality comparisons. Note Domain API supports only the filter function contains . For example, in Domain API, the following is supported: ~/General_Products_Products?$filter=contains(Name,'ppl') However, this is not valid: ~/General_Products_Products?$filter=Name eq 'Apple'"
  },
  "domain-api/complex-types/quantity.html": {
    "href": "domain-api/complex-types/quantity.html",
    "title": "Quantity (Complex value) | ERP.net Developer Docs",
    "keywords": "Quantity (Complex value) The ERP domain model declares a special type for quantity properties. The quantity is represented by value and measurement unit. Properties Name Type Description Unit String TThe measurement unit of the quantity represented by it's code. Value Decimal The value of the quantity. Domain API Example: { \"LineAmount\": { \"Value\": \"5.555\", \"Unit\": \"PCS\" } } Note Because Quantity is odata complex object it can not participate in uri $filter query parameter. To filter by Amount or Quantity properties you can use the following: ~/Logistics_Inventory_StoreTransactionLines?$filter=QuantityValue ge 5.555 ~/Crm_Sales_SalesOrderLines?$filter=LineAmountValue ge 5.555"
  },
  "domain-api/index.html": {
    "href": "domain-api/index.html",
    "title": "Domain API | ERP.net Developer Docs",
    "keywords": "Domain API Introduction The Domain API is the primary API for accessing and manipulating data in ERP.net. It is most useful for UI and service apps. For BI, you should use the Table API . For an overview and introduction of the Domain API, read the thorough presentation at the home page of the developer docs . Based on OData The Domain API is based on the OData protocol . It allows object-oriented access to the data exposed by the ERP.net domain objects. The OData API is structured along a number of entity types (called \"repositories\" in ERP.net), that represent the Domain Model of the ERP Instance. Each entity type contains data attributes, which can be filtered, sorted, etc. The model also provides information on how to navigate between the repositories. For a quick introduction to OData, check the beginners tutorial at the OData site: https://www.odata.org/getting-started/understand-odata-in-6-steps/ Step by step To learn more about the ERP.net Domain API, read below: URL components - OData is heavy on the URL. Read this topic to understand the structure of the URL. Query options - read more about the supported OData query constructs like $filter, $top and similar. Query Builder - the visual query designer can help you easily build complex $select/$expand queries. Complex types - ERP.net defines several OData complex types, including quantity, amount and multi-language string. Transactions - ERP.net supports server-side front-end transactions. Working with documents - working with documents is a common scenario when using the API. Batch requests (OData site) - ERP.net fully supports batch requests, saving round-trips to the server."
  },
  "domain-api/libraries.html": {
    "href": "domain-api/libraries.html",
    "title": "ERP.net libraries | ERP.net Developer Docs",
    "keywords": "The Domain API is based on the OData protocol . It allows object-oriented access to the data exposed by the ERP.net domain objects. Since the Domain API is an HTTP RESTfull API, it can be accessed by simple HTTP requests. However there are many ODATA libraries that can be used. ERP.net libraries .NET ErpNet.Api.Client - Handles authentication of service clients and work with Domain API requests, both - untyped and typed. Javascript oidc-client - Library to provide OpenID Connect (OIDC) and OAuth2 protocol support for client-side, browser-based JavaScript client applications. Also included is support for user session and access token management. PHP OpenIdConnect client - A simple library that allows an application to authenticate a user through the basic OpenID Connect flow."
  },
  "domain-api/query-builder.html": {
    "href": "domain-api/query-builder.html",
    "title": "Query Builder | ERP.net Developer Docs",
    "keywords": "Query Builder Description ERP.net has an integrated visual Query Builder. The Query Builder allows building queries, specific to the ERP Instance. When you use the Query Builder, it allows you to select the user-defined data and calculated attributes in that instance. The Query Builder allows the developers to create the query visually and then just re-use the query text, replacing the parameters. Try it To access the Query Builder for DEMODB, go to: https://demodb.my.erp.net/api/domain/querybuilder Tip User: Admin Password: 123 While the query is built, the Query Builder changes its URL. For example, to preview the same query for the first 10 products in the Query Builder, head to: https://demodb.my.erp.net/api/domain/querybuilder#General_Products_Products?$top=10 When you press Execute in the Query Builder, you can preview the result both as table and as JSON. Note Pay attention to the link under the selected entity, which opens the documentation for the entity."
  },
  "domain-api/query-options/filter.html": {
    "href": "domain-api/query-options/filter.html",
    "title": "$filter query option | ERP.net Developer Docs",
    "keywords": "$filter query option $filter is a standard OData query option, implemented with some limitations in ERP.net. Not every operation and function provided by the OData standard are implemented. For a great introduction to $filter, read the OData $filter tutorial . This article mostly emphasizes on the implementation details of $filter in ERP.net. Supported operators Operator Description eq Equal ge Greater than or equal le Less than or equal and Returns true if both the left and right operands evaluate to true. in The in operator returns true if the left operand is a member of the right operand. The right operand MUST be a comma-separated list of primitive value. Operator 'or' is not supported Operator 'or' is not supported. However all navigation properties and some properties of enumerable type (e.g. General_Document.State) support the 'in' operator. Operator 'in' The 'in' operator can be used for minimizing the query round trips. Examples: List of Id values: General_Products_Products?$filter=Id in (0e8fb111-5b04-4eab-a890-47cfb9cfa4c4, 14389ba0-ee5c-459e-afd0-d74c17240f28) List of enum values: Crm_Sales_SalesOrders?$top=10&$filter=State in ('FirmPlanned', 'Released')&$select=State List of reference values: Crm_Sales_SalesOrders?$top=10&$select=DocumentType&$filter=DocumentType in ('General_DocumentTypes(f8a93d3a-8cf3-4a09-9d45-667d664cb98d)', 'General_DocumentTypes(469b67b1-8b4b-4fb4-9d97-20c96105a85a)') List of reference values with different object types (the reference is of the base object type): Crm_Sales_SalesOrders?$top=10&$filter=ToParty in ('General_Contacts_Persons(adb66f3f-e173-4a37-878c-000920f44ff0)', 'General_Contacts_Companies(39148781-d316-4d4d-a392-0002f73710f2)') Filter by date and date-time attributes Example: Crm_Sales_SalesOrders?$top=10&$filter=DocumentDate ge 2020-01-01Z Note! Filter by date-time is not supported! A date-time value in the filter is truncated to date only. For example $filter=TransactionTimestamp le 2020-01-05T23:59:59.999Z is converted to $filter=TransactionTimestamp le 2020-01-05T00:00:00Z . If we want to find all store transaction lines for date 2020-01-05 we should make filter $filter=TransactionTimestamp ge 2020-01-05T00:00:00Z and TransactionTimestamp ge 2020-01-06T00:00:00Z and then in the result we must check for lines on 2020-01-06. Filter by complex attributes In ODATA complex objects can not participate in the $filter clause. The quantities and amounts in DomainApi are represented as complex objects that contain the value and the measurement unit (or currency). To filter by Amount or Quantity attribute you can use the name of the attribute followed by 'Value': ~/Logistics_Inventory_StoreTransactionLines?$filter=QuantityValue ge 5.555 ~/Crm_Sales_SalesOrderLines?$filter=LineAmountValue ge 5.555 CustomPropertyValue is another complex type. To filter by Custom Property you must use only the short value (only eq is supported): General_Products_Products?$top=10&$select=CustomProperty_color&$filter=CustomProperty_color eq 'blue' MultilanguageString is another complex type. Multi-language properties support only filter function contains: ~/General_Products_Products?$filter=contains(Name,'ppl') This is an invalid filter: ~/General_Products_Products?$filter=Name eq 'Apple' Supported standard functions Edm.Boolean contains(Edm.String, Edm.String) Edm.Boolean endswith(Edm.String, Edm.String) Edm.Boolean startswith(Edm.String, Edm.String) Supported non-standard $filter functions Edm.Boolean contains(Erp.MultilanguageString, Edm.String) Returns true if the second string is contained in any language of the first multi-language string. Example: ~/Crm_Customers?$filter=contains(Party/PartyName,'Peter') Edm.Boolean equalnull(any-type,any-type) Returns true if the first argument is equal to the second argument or the first argument is null. Example: ~/Crm_Sales_SalesOrders?&$filter=equalnull(Store,'Logistics_Inventory_Stores(8d7dd360-17cc-47f4-a878-1ee0f06445ad)') Edm.Boolean lessequalnull(any-type,any-type) Returns true if the first argument is less than or equal to the second argument or the first argument is null. Example: ~/Crm_SalesPersons?$top=10&$filter=lessequalnull(ContractEndDate,2019-02-01T00:00:00.000Z) Edm.Boolean greaterequalnull(any-type,any-type) Returns true if the first argument is greater than or equal to the second argument or the first argument is null. Example: ~/Crm_SalesPersons?$top=10&$filter=greaterequalnull(ContractStartDate,2019-02-01T00:00:00.000Z)"
  },
  "domain-api/query-options/index.html": {
    "href": "domain-api/query-options/index.html",
    "title": "Query Options | ERP.net Developer Docs",
    "keywords": "Query Options Query options allow you to control the amount and order of the data that a data service returns for the resource identified by the URI. OData system query options are provided by the OData framework and documented in detail in the OData specification at http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part2-url-conventions.html . For a great introduction to query options, read the OData query data tutorial . List of supported query options Query Option Origin Description $count OData The $count system query option allows clients to request a count of the matching resources included with the resources in the response. The $count query option has a Boolean value of true or false. $expand OData The $expand system query option specifies the related resources or media streams to be included in line with retrieved resources. $filter OData The $filter system query option allows clients to filter a collection of resources that are addressed by a request URL. $metadata OData Returns the data model (which is the structure of all resources). $orderby OData Specifies an expression for determining which values are used to order the collection of records identified by the resource path section of the URI. $select OData Limits the data to the specified attributes. $skip OData The $skip query option requests the number of items in the queried collection that are to be skipped and not included in the result. $top OData The $top system query option requests the number of items in the queried collection to be included in the result. options Extension List of comma separated options/flags that affect the behavior of the system. Note Options marked as \"Extension\" are not part of the OData standard and are specific to the ERP.net Domain API. They do not use $ in front of their name, as it is reserved for standard OData query options."
  },
  "domain-api/query-options/options.html": {
    "href": "domain-api/query-options/options.html",
    "title": "options query option | ERP.net Developer Docs",
    "keywords": "options query option Note options is Domain API specific option and is not part of the OData standard. Therefore, this option DOES NOT have \"$\" in front of its name. options contains option flags, which are provided as url arguments. Flag Description skipnulls Indicates that properties with null value are not returned in the JSON result. Example: options=skipnulls"
  },
  "domain-api/query-options/select.html": {
    "href": "domain-api/query-options/select.html",
    "title": "$select query option | ERP.net Developer Docs",
    "keywords": "$select query option Description $select is an OData system query option. The $select system query option allows clients to request a specific set of properties for each entity or complex type. For a great introduction to $select, read the OData $filter tutorial . $expand The $select query option is often used in conjunction with the $expand system query option, to define the extent of the resource graph to return ($expand) and then specify a subset of properties for each resource in the graph ($select). Expanded navigation properties MUST be returned, even if they are not specified as a selectItem. Default attributes When there is no $select clause or '$select=*', only the default attributes are returned. The attributes, which are returned by default are: System attributes like Name , Description , PartNumber , etc. References like ProductType , ProductGroup , etc (in OData terminology - Navigation properties) The following attributes are not returned by default: The 'Id' attribute Custom (user-defined) attributes Child lists (OData terminology: Collection navigation properties) Calculated attributes Example: GET ~/General_Products_ProductTypes?$top=2 The result is: { \"@odata.context\": \"https://example-server.com/example-db/api/domain/odata/$metadata#General_Products_ProductTypes\", \"value\": [ { \"@odata.id\": \"General_Products_ProductTypes(c696c660-9aa4-4fe5-a396-126af4101792)\", \"IsDefault\": false, \"IsFixedAsset\": false, \"IsServiceActivityService\": false, \"IsServiced\": true, \"IsShipped\": true, \"IsStocked\": true, \"LotAutoCreation\": true, \"Code\": \"001\", \"Name\": { \"BG\": \"sdds\" } }, { \"@odata.id\": \"General_Products_ProductTypes(880b0c31-a9ef-4a3c-a0e7-13d39aa57464)\", \"IsDefault\": false, \"IsFixedAsset\": false, \"IsServiceActivityService\": false, \"IsServiced\": false, \"IsShipped\": false, \"IsStocked\": false, \"LotAutoCreation\": false, \"Code\": \"test sch\", \"Name\": { \"BG\": \"test sch\" } } ] } Note Non default properties must be explicitly specified in the $select clause. Example: GET ~/General_Products_Products?$top=2&$select=CustomProperty_WebName,CalculatedAttribute_ExampleAttr The result will only contain the selected properties. The default $select keyword You can explicitly use the keyword default in the $select clause to include all default properties. GET ~/General_Products_Products?$top=2&$select=default,CustomProperty_WebName,CalculatedAttribute_ExampleAttr The result will contain all default properties plus the selected CustomProperty_WebName and CalculatedAttribute_ExampleAttr."
  },
  "domain-api/samples/build-ecommerce-website.html": {
    "href": "domain-api/samples/build-ecommerce-website.html",
    "title": "Build E-Commerce Website | ERP.net Developer Docs",
    "keywords": "Build E-Commerce Website"
  },
  "domain-api/samples/build-payment-connector.html": {
    "href": "domain-api/samples/build-payment-connector.html",
    "title": "Build Payment Connector | ERP.net Developer Docs",
    "keywords": "Build Payment Connector The Payment Connector sample demonstrates connecting ERP.net with Stripe. The app demonstrates simplified workflow: Internal user logins interactively. The most recent 10 payment orders, accessible by the user, are displayed. The user chooses a payment order. The selected payment order is exported to a demo Stripe account. After a demo payment is made, the app creates a Payment Transaction with the payment details. The app includes the following basic tasks: Register UI app. Login interactive. List Payment Orders. Create Payment Transaction. The app is written entirely in JavaScript and hosted in GitHub Pages. You can access the app source project here. To run the application, click here. You can use admin/123 for internal user logon."
  },
  "domain-api/samples/dotnet-service-app.html": {
    "href": "domain-api/samples/dotnet-service-app.html",
    "title": "Dot Net Service Application | ERP.net Developer Docs",
    "keywords": "Dot Net Service Application This app demonstrates a Service Application created in .net. Register Trusted Application See source in GitHub"
  },
  "domain-api/samples/dotnet-web-app.html": {
    "href": "domain-api/samples/dotnet-web-app.html",
    "title": "Dot Net Web Application | ERP.net Developer Docs",
    "keywords": "Dot Net Web Application Register Trusted Application See source in GitHub"
  },
  "domain-api/samples/javascript-client.html": {
    "href": "domain-api/samples/javascript-client.html",
    "title": "Javascript Interactive Client | ERP.net Developer Docs",
    "keywords": "Javascript Interactive Client Register Public Trusted Application See source in GitHub For more detailed tutorial for authentication, see https://identityserver4.readthedocs.io/en/latest/quickstarts/4_javascript_client.html"
  },
  "domain-api/samples/php-interactive-client.html": {
    "href": "domain-api/samples/php-interactive-client.html",
    "title": "PHP Interactive Web Application | ERP.net Developer Docs",
    "keywords": "PHP Interactive Web Application Register Confidential Trusted Application See source in GitHub"
  },
  "domain-api/samples/php-service-client.html": {
    "href": "domain-api/samples/php-service-client.html",
    "title": "PHP Service Application | ERP.net Developer Docs",
    "keywords": "PHP Service Application Register Service Trusted Application See source in GitHub"
  },
  "domain-api/samples/src/dotnet/ErpNetDemoClient/wwwroot/lib/jquery-validation/LICENSE.html": {
    "href": "domain-api/samples/src/dotnet/ErpNetDemoClient/wwwroot/lib/jquery-validation/LICENSE.html",
    "title": "The MIT License (MIT) | ERP.net Developer Docs",
    "keywords": "The MIT License (MIT) Copyright Jörn Zaefferer Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "domain-api/transactions.html": {
    "href": "domain-api/transactions.html",
    "title": "Domain API Transactions | ERP.net Developer Docs",
    "keywords": "Domain API Transactions Тhe ErpNet Domain API introduces a server-side transaction that holds any change of an entity object made between calls of BeginTransaction and EndTransaction. BeginTransaction is unbound (not bound to any entity) action (actions are called with HTTP POST method) that initializes an object transaction on the server and returns a TransactionId token as a plain text (not json - for example XXXXX). This object transaction is something like memory data-set that holds copies of database records. The transaction lives in the server memory for 20 minutes sliding expiration. If any subsequent request includes the TransactionId token in the HTTP header (like this: TransactionId:XXXXX) the requested operation will not be executed against the database but against the memory transaction. This means that any POST, PATCH and DELETE requests will be executed only in memory. Parameters: model: allowed values are \"common\" or \"frontend\". This parameter indicates the data model used for the transaction. Front-end data model uses front-end business rules. For example front-end logic is when Quantity of a SalesOrderLine is changed the corresponding QuantityBase is calculated by a dedicated front-end business rule. Common model defines minimal business logic applicable in all cases - front-end or back-end. The default is \"common\". trackChanges: true or false. This parameter enables the usage of GetChanges and WaitForChanges functions. This means that if parameter trackChanges is not true any call to GetChanges and WaitForChanges will return error. GetChanges is unbound function - functions are invoked through GET HTTP method. This function requires the HTTP header TransactionId to be passed. It also requires the front-end transaction to be initialized with trackChanges : true. Front-end transactions support front-end business rules. These are rules that are usually triggered on attribute change. For example if we change the DocumentDate attribute of a SalesOrder (using regular PATCH request including the TransactionId in the request header), this change will trigger updates of several other attributes. If the front-end transaction is initialized with trackChanges : true, the changes will be collected in the server side (inside the front-end transaction). GetChanges returns all changes made after the last call of GetChanges or WaitForChanges. The changes are grouped by operation type (insert, update, delete), entity name, entity id. The call of GetChanges (or WaitForChanges) clears the collected changes in the transaction. If no change is made after the last call of GetChanges it will return empty result (empty JSON object). WaitForChanges is unbound function that returns the same result as GetChanges but if there is not any change the function blocks until a change occurs or until it times out. The wait timeout is 2 minutes. This function requires the HTTP header TransactionId to be passed. It also requires the front-end transaction to be initialized with trackChanges : true. The response format of GetChanges and WaitForChanges follows this JSON schema: \"insert\" | \"update\" | \"delete\" : { \"<entity-name>\" : { // example: \"General_Products_Products\" \"<id>\": { // example: 59098bcf-f331-478f-91c2-f5520590f534 (Guid) \"<attribute>\": <value> // example: \"ABCClass\": \"A\" } } } EndTransaction is unbound action that disposes the memory transaction created with BeginTransaction. After EndTransaction the transaction id becomes invalid. Parameters: commit: true or false. Specifies whether to commit the transaction (save the changes) or not. Default is true. To commit the changes made in the memory transaction to the database you should provide the parameter commit = true. Note The object transaction is called Front-End because any change of an entity object will trigger front-end business rules. For example if Quantiy of a SalesOrderLine is changed the corresponding QuantityBase will be automatically recalculated. This is front-end behavior - if front-end transaction is not used the QuantityBase will not be automatically recalculated and it's value must be explicitly set. Through Front-End Transaction, GetChanges or WaitForChanges we can synchronize our UI passing only the user actions to the server - such as update of an attribute, creating new object or deleting existing object. Example1: Simple usage of front end transaction. POST /api/domain/odata/BeginTransaction HTTP/1.1 Host: https://example.com Content-Type: application/json Result: xcasfawed Make subsequent updates of products PATCH /api/domain/odata/General_Products_Products(59098bcf-f331-478f-91c2-f5520590f534) HTTP/1.1 Host: https://example.com Content-Type: application/json TransactionId: xcasfawed { \"ABCClass\":\"A\", \"StandardLotSizeBase\":{\"Value\":3.45,\"Unit\":\"PCS\"}, \"MeasurementUnit@odata.bind\":\"https://example.com/api/domain/odata/General_MeasurementUnits(5c5e77ce-60bb-4338-abd0-3a2acb27ff93)\" } Commit transaction POST /api/domain/odata/EndTransaction HTTP/1.1 Host: https://example.com Content-Type: application/json TransactionId: xcasfawed { \"commit\": true } Example1: Updating SalesOrder.DocumentDate and calling GetChanges. POST /api/domain/odata/BeginTransaction HTTP/1.1 Host: https://example.com Content-Type: application/json { \"model\": \"frontend\", \"trackChanges\": true } Result: uf3d1yc4rqg Updating DocumentDate. This update triggers many front-end business rules that update many other attributes in the sales order and it's lines. PATCH /api/domain/odata/Crm_Sales_SalesOrders(33cd6cb9-0f43-df11-a1e1-0018f3790817) Host: https://example.com Content-Type: application/json TransactionId: uf3d1yc4rqg { \"DocumentDate\": \"2020-05-08T00:00:00Z\" } Result: nocontent Call GetChanges. The result is a JSON object with all changes made after the last call to GetChanges (or BeginTransaction if GetChanges is not called yet). GET /api/domain/odata/GetChanges HTTP/1.1 Host: https://example.com Content-Type: application/json TransactionId: uf3d1yc4rqg Result: { \"@odata.context\": \"https://clients.inco.bg/api/domain/odata/$metadata#Erp.OpenObject\", \"update\": { \"Crm_Sales_SalesOrders\": { \"33cd6cb9-0f43-df11-a1e1-0018f3790817\": { \"PaymentDueDate\": \"2020-05-08T00:00:00Z\", \"PaymentDueStartDate\": \"2020-05-08T00:00:00Z\", \"RequiredDeliveryDate\": \"2020-05-08T00:00:00Z\", \"DocumentDate\": \"2020-05-08T00:00:00Z\" } }, \"Crm_Sales_SalesOrderLines\": { \"c253add9-0f43-df11-a1e1-0018f3790817\": { \"HistoricalUnitCost\": null, \"RequestedQuantity\": null, \"StandardUnitPrice\": null, \"RequiredDeliveryDate\": \"2020-05-08T00:00:00Z\", \"LineAmount\": { \"Value\": 1.62, \"Currency\": \"BGN\" }, \"Quantity\": { \"Value\": 2, \"Unit\": \"бр\" }, \"QuantityBase\": { \"Value\": 2, \"Unit\": \"бр\" }, \"StandardQuantityBase\": { \"Value\": 2, \"Unit\": \"бр\" }, \"UnitPrice\": { \"Value\": 0.9, \"Currency\": \"BGN\" } }, \"c653add9-0f43-df11-a1e1-0018f3790817\": { \"HistoricalUnitCost\": null, \"RequestedQuantity\": null, \"StandardUnitPrice\": null, \"RequiredDeliveryDate\": \"2020-05-08T00:00:00Z\", \"LineAmount\": { \"Value\": 5.53, \"Currency\": \"BGN\" }, \"Quantity\": { \"Value\": 3, \"Unit\": \"бр\" }, \"QuantityBase\": { \"Value\": 3, \"Unit\": \"бр\" }, \"StandardQuantityBase\": { \"Value\": 3, \"Unit\": \"бр\" }, \"UnitPrice\": { \"Value\": 2, \"Currency\": \"BGN\" } }, \"c753add9-0f43-df11-a1e1-0018f3790817\": { \"HistoricalUnitCost\": null, \"RequestedQuantity\": null, \"StandardUnitPrice\": null, \"RequiredDeliveryDate\": \"2020-05-08T00:00:00Z\", \"LineAmount\": { \"Value\": 4.38, \"Currency\": \"BGN\" }, \"Quantity\": { \"Value\": 6, \"Unit\": \"kg\" }, \"QuantityBase\": { \"Value\": 6, \"Unit\": \"kg\" }, \"StandardQuantityBase\": { \"Value\": 6, \"Unit\": \"kg\" }, \"UnitPrice\": { \"Value\": 0.8, \"Currency\": \"BGN\" } }, \"c153add9-0f43-df11-a1e1-0018f3790817\": { \"HistoricalUnitCost\": null, \"RequestedQuantity\": null, \"StandardUnitPrice\": null, \"RequiredDeliveryDate\": \"2020-05-08T00:00:00Z\", \"LineAmount\": { \"Value\": 10.56, \"Currency\": \"BGN\" }, \"Quantity\": { \"Value\": 10, \"Unit\": \"l\" }, \"QuantityBase\": { \"Value\": 20, \"Unit\": \"бр\" }, \"StandardQuantityBase\": { \"Value\": 20, \"Unit\": \"бр\" }, \"UnitPrice\": { \"Value\": 1.17348, \"Currency\": \"BGN\" } } } } }"
  },
  "domain-api/url-components.html": {
    "href": "domain-api/url-components.html",
    "title": "URL Components Of a OData Query | ERP.net Developer Docs",
    "keywords": "URL Components Of a OData Query https://demodb.my.erp.net/api/domain/odata/General_Products_Products?$top=10&$orderby=Name \\_________________________________________/\\_______________________/ \\___________________/ | | | service root URL resource path query options Service Root URL - this is the address of the API + /domain/odata/ Resource Path - The requested entity Query Options - optional query options NOTES: The address of the API is usually and by default: https://<<Instance_Name>>.my.erp.net/api/ However, this is not certain. Each site in ERP.net can have its own address, which is configurable. For example, this is also valid address: https://erpapi.example.com/ The ERP.net API Resource Path supports only specifying a single entity. REST style sub-entities are not supported. However, the API allows many other ways to expand into sub-entities. Query Options Allow the user to specify optional Query Options . For more information, visit the OData standards page: http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_URLComponents"
  },
  "includes/erpnet.html": {
    "href": "includes/erpnet.html",
    "title": "| ERP.net Developer Docs",
    "keywords": "ERP.net"
  },
  "includes/name.html": {
    "href": "includes/name.html",
    "title": "| ERP.net Developer Docs",
    "keywords": "ERP.net"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to the ERP.net Developer Documentation | ERP.net Developer Docs",
    "keywords": "Welcome to the ERP.net Developer Documentation Here you will find all the necessary resources for building applications targeting the ERP.net services. This documentation contains developer resources. For business logic and other technical documentation, you might want to check the Technical Documentation . ERP Instances The ERP.net service is a hosted ERP service. Accessing the data is done through ERP Instances. When you sign up at erp.net , you can create and manage a new ERP Instance. An ERP Instance is a tenant in the hosting environment. It is multi-company, e.g. it allows managing multiple related legal entities (companies) in one instance. You don't need to create separate instances for each managed company. Each ERP Instance has a unique name. The instance can be accessed at: https://<<instance_name>>.my.erp.net For example, the demonstration database, DEMODB, is located at: https://demodb.my.erp.net The API Each ERP Instance CAN have an API site. It \"can\" have, because, the API is a site, similar to other sites, which the instance can launch. In order for the API to function, it needs to be configured and launched for the ERP Instance. The common URL for the API site is /api/ inside the ERP instance. For example, the DEMODB has an API site at: https://demodb.my.erp.net/api/ The Domain API The Domain API is the primary means for accessing and manipulating data in the ERP Instance. It can currently be consumed in OData 4 format. The Domain API is an API proxy for the object-oriented Domain Model of ERP.net. It is targeted towards UI and service apps. These kinds of apps usually read and update moderate amounts of data. The Domain API is NOT adequate for read-only dumping of very large amounts of data, which is usually done by BI applications. BI applications should find other solutions or try to read data in small chunks. The Domain API is located at /domain/odata/ within the API site. For DEMODB, this is at: https://demodb.my.erp.net/api/domain/odata/ Tip User: Admin Password: 123 If you try the above link, it will ask you for user credentials. Most ERP Instances should, by default, be configured to NOT accept basic authentication. However, for demonstration purposes, DEMODB is configured to allow it. Sample Query OData v4 allows the creation of URL-based queries. For example, to take the first 10 products (in undefined order), you can use: https://demodb.my.erp.net/api/domain/odata/General_Products_Products?$top=10 [!NOTE:] The above will return unformatted JSON result, intended to be consumed by client app. For a quick overview of OData, see this topic - Understand OData in 6 steps . The Query Builder ERP.net has integrated visual Query Builder. The Query Builder allows building queries, specific to the ERP Instance. When you use the Query Builder, it allows you to select the user-defined data and calculated attributes in that instance. The Query Builder allows the developers to create the query visually and then just re-use the query text, replacing the parameters. To access the Query Builder for DEMODB, go to: https://demodb.my.erp.net/api/domain/querybuilder While the query is built, the Query Builder changes its URL. For example, to preview the same query for the first 10 products in the Query Builder, head to: https://demodb.my.erp.net/api/domain/querybuilder#General_Products_Products?$top=10 When you press Execute in the Query Builder, you can preview the result both as a table and as JSON. Note Pay attention to the link under the selected entity, which opens the documentation for the entity. The Query Tool The Query Tool is a simple Postman-like tool for querying the database. It does not have the visual building abilities of the Query Builder. However, it can represent all possible REST requests and is very simple to use. Note The Query Tool is the default tool, which is used to represent queries in forum posts, tickets, etc. To access the Query Tool for DEMODB, go to: https://demodb.my.erp.net/api/domain/query Query Basics ERP.net allows only a subset of the full OData queries. Generally, you cannot do JOINs and filter with OR. However, you can filter by multiple values, like the SQL IN operator: https://demodb.my.erp.net/api/domain/odata/General_Products_Products?$top=10&$filter=Id%20in%20(edf2bd2a-7e4d-e111-a06c-00155d00050a,cf728601-1fd5-4853-ab23-01deeee7d038) Instance API Reference Each ERP Instance has its own API reference documentation. The instance-specific API reference documentation is like the Model docs. The main difference is that the reference documentation of a specific ERP Instance lists also the user-defined attributes. The user-defined attributes can be queried mostly like the system attributes. The instance reference documentation of DEMODB is at: https://demodb.my.erp.net/api/domain/docs Tip Since the instance API reference contains user-defined objects from the database, it is accessible only after authentication. For general-purpose information, check the Model . Security Someone said: \"Security is hard, deal with it\". The hard truth is that security today is much harder than it was 10 years ago. Once upon a time, there was a user and a password. Today, we have OAuth with Trusted Apps, Security Tokens, complicated security workflows, and all the other things. There are some good things, though. Single Sign-On, multi-factor authentication, and other extras come to mind. But, at the end of the day, you have to do much more work to create a secure app. ERP.net is based on the OAuth 2 security paradigm with OpenID Connect support. For more information about security, read Introduction to authentication in ERP.net . Next Steps See the general topics in General . Check the Domain API documentation . Check the Domain Model for reference information about objects, API methods, integrated business rules, and more."
  },
  "README.html": {
    "href": "README.html",
    "title": "Welcome to the ERP.net Developer Documentation | ERP.net Developer Docs",
    "keywords": "Welcome to the ERP.net Developer Documentation The documentation uses DocFX to build."
  },
  "testinclude.html": {
    "href": "testinclude.html",
    "title": "| ERP.net Developer Docs",
    "keywords": "The includes/erpnet.md file exists for the sole reason of containing the proper writing of \"ERP.net\". It is intended to be included inline in the text of other topics. Unfortunately, DocFX seems to handle the matter of inline-inclusion with a pretty heavy-weight syntax. Example: I can easily create a link to the erpnet topic. But this is a link. We need just to include the file contents. For more information: https://dotnet.github.io/docfx/tutorial/links_and_cross_references.html#shorthand-form I can include the file contents, but with a pretty heavy syntax ERP.net. This syntax is not adequate for everyday writing. For more information: https://dotnet.github.io/docfx/spec/docfx_flavored_markdown.html#inline Ideally, the following syntax should include the text inline: This is the ERP.net service! The above line should render as: This is the ERP.net service!"
  },
  "topics/application-types.html": {
    "href": "topics/application-types.html",
    "title": "Application types | ERP.net Developer Docs",
    "keywords": "Application types To aid in correctly choosing the authentication and API types, we have compiled a list of common application types. Summary of application types Below, you can find a summarization of the application types and the respective user, authentication and API types. Application Type User Type Authentication API Internal Web app Internal Authorization Code Domain API External Web app External Client Credentials Domain API Service application Application Client Credentials Domain API Business Intelligence Application Basic Authentication Table API Backup Application Basic Authentication Table API Application type details Internal Web App These are internal enterprise applications, used by the internal users . User type: Internal users Authentication: Authorization Code API: Domain API External Web App External web apps are geared towards external users and allow them limited and specialized access. External web apps use Application Accounts to access the ERP resources on behalf of the external users. User type: External users Authentication: Client Credentials API: Domain API Note Some applications might allow both external and internal users. In this case, the app should use the same authentication like internal web app. Service application Service applications are applications, which run usually in background and do not require user login. User type: Application Account Authentication: Client Credentials API: Domain API BI application Business Intelligence (BI) apps use platforms like Power BI to visualize user data in various dashboards, charts, etc. User type: Application Account Authentication: Basic Authentication API: Table API Backup Backup applications transfer data to external sources. User type: Application Account Authentication: Basic Authentication API: Table API"
  },
  "topics/authentication/authentication-flows.html": {
    "href": "topics/authentication/authentication-flows.html",
    "title": "Authentication Flows | ERP.net Developer Docs",
    "keywords": "Authentication Flows Authentication Flows are the process flows, which an external app can use to request access to the ERP Instance. Authorization Code This authorization flow is used by interactive user applications, which access the ERP Instance on behalf of the logged user. If we relate to Tom and Jane scenario, this would be the case when we want Toms app to create the Sales Orders using Jane account and access permissions. Jane wants to start using Toms app to create her Sales Orders. Toms app is generally authorized for the ERP Instance (with Trusted Application record), but Jane has not yet authorized it to work on her behalf! If Toms app presents a login screen to get Janes credentials and use them to access the ERP Instance, this would expose the credentials to the app author. So, instead, the app asks the platform to verify that it is Jane in front of the computer. Toms app requests the ERP Instance to authenticate the user using the browser. Jane is presented with a familiar log-in screen, which is used by ALL apps. Since Jane trusts the platform, she securely enters her user name and password. The ERP Instance validates Janes credentials and creates a special id token . The token is actually just a string, which contains Janes details, like name, profile picture and email. The token is passed back to the app, using the apps Login URL . Now, Toms app knows that it is Jane which is using his app, but without ever gaining access to her credentials! Client Credentials Client Credentials is an authorization flow, with which an app requests service access. The service account, which is used to create the session is configured in the Trusted Application record. Note The service session is not related to any specific interactive user. It can be created on service startup and renewed whenever necessary. Lets relate this to the Tom and Jane scenario from the Overview . With service access, Toms app will create all Sales Orders with the same service account. It would not use Janes or any other user account to access the ERP Instance. The basic flow is the following: Toms app provides its application URI and application secret to the ERP Instance. The URI and secret are much like user name and password, but for application. The ERP Instance looks up the Trusted Application record for Toms app. Based on the Service Account specified in the record, the ERP Instance creates a special access token and passes it to Toms app. The access token is just a string, containing the granted access permissions, which is digitally signed. Toms app uses the access token to call the ERP APIs and create the Sales Orders."
  },
  "topics/authentication/index.html": {
    "href": "topics/authentication/index.html",
    "title": "Introduction to authentication in ERP.net | ERP.net Developer Docs",
    "keywords": "Introduction to authentication in ERP.net ERP.net APIs use OAuth 2 for authentication and authorization. In OAuth 2, the authentication and authorization is performed by an identity provider. ERP.net has built-in identity provider, which conforms to the OpenID Connect specification. Why do we need OAuth 2? In the good old days of lesser security, there was just a user and a password. If we need to access an app, we enter the user name and the password and voila - we get access! So, what is the problem to continue like this? Suppose Tom has created a good little app, which automates the Sales Order creation. You just select from one of three predefined templates and your sales order is created. The problem is: How should Toms app access your ERP Instance? Option 1 would be to give him your user name and password. OK, but then your user name and password are no longer so secure, aren't they? Even if you don't give them directly to Tom, but \"just\" enter them in a web form, Tom still receives your precious security secret! Option 2 would be ... Can't we can just give Toms app access to the ERP Instance, but without sharing our credentials? This is where OAuth 2 comes in. A group of very clever people have come up with a standard, which allows users to authorize apps to do things on their behalf. Enter the age of platforms and apps . Note To be more precise, it should be called age of Identity providers and apps. But in the current case, the platform is also the Identity provider. Trust an application When you install an app on your phone, you authorize this app to do certain things with your data. The Android or iOS platform allows the app to access only the data you have authorized it to access. You fully trust the platform, but you don't fully trust any app out there. The platform should stop malicious attempts to steal and manipulate your data. Similar, but still a bit more complicated paradigm can be applied to ERP Instances. The administrator of the ERP Instance plays the role of the phone owner. The ERP Instance is the platform and the app is, well, the app. In our phones, before using an app, we need to install it. With ERP Instances, we don't actually install the app, because the app is already hosted somewhere. So, this step is skipped. We just have to tell the system, that we trust this app. Manually trust an application To manually trust an application, you create a Trusted Application record, which informs the ERP Instance, that you trust this application. For more information, see Trusted Applications . Install from a marketplace Another way to trust an application is to activate it from a marketplace. In this case, the marketplace redirects the browser to a \"Register Trusted Application\" endpoint in your ERP Instance. The registration process verifies that you are an administrator of the ERP Instance and then simply asks you if you want to trust this application. Note This is very similar to the way your phone asks you if you trust a new application. Access data in the ERP Instance Once an application is trusted, it can use two ways to access ERP data - through user account or through service access. Interactive applications Interactive applications have UI and use Authorization Code flow to request user access. Service applications Service applications have no UI and use only service accounts. They use the Client Credentials flow to request service access. Note A single application can use both interactive user login and service access to perform different functions. Read more about Authentication Flows ."
  },
  "topics/authentication/trusted-applications.html": {
    "href": "topics/authentication/trusted-applications.html",
    "title": "Trusted Applications | ERP.net Developer Docs",
    "keywords": "Trusted Applications A trusted application record tells the system that a specific application is allowed to access the ERP Instance. General information Trusted Application record can be created manually or through a marketplace activation. Anyway, it is good to understand the information stored in such a record. Anatomy of a Trusted Application record A Trusted Application record contains many fields. To better understand them, read below. Name This is the multi-language name of the application. Used mostly for interactive display in UI clients. Not important for the functioning of the application. Application URI This is the application identifier. It is passed as parameter by the applications, when they claim who they are in front of the ERP Instance. The Application URI should be unique for the ERP Instance . Preferably, it should be globally unique, so that the application can be listed in a marketplace. Use short, concise identifier. This will appear in logs and other files. Avoid non-latin and special characters. It is advised, that you incorporate this identifier as constant in your application and use the same URI for all \"trusts\" for your app. Note It is best to base your app URIs on your web site and some extension. For example, mywebsite.com/myapp1 is a good URI. Client Type Client Type specifies the confidentiality abilities of the your application. Client types are: Confidential Public Confidential client applications are able to keep secrets. Public apps are generally unable to hide a secret from an advanced intruder. For example: JavaScript apps, executed in the user browser, are public apps. Generally they cannot hide a secret from an advanced user. If a JavaScript app has a secret in its code, it can easily be revealed (and probably abused). Server executed apps are usually confidential. They are executed in a trusted environment and, if properly secured, can keep a secret. Application Secret Hash This is a bit of a challenge. You have to use a tool to get the hash. Type this in the browser (replace \"mysecret\" with your secret): https://demodb.my.erp.net/sys/tools/sha256?secret=mysecret Basic Authentication Allowed At first, this is a bit confusing. It has effect on the whole ERP Instance. Once we have at least (actually also at most) one application with Basic Authentication = ON, we have allowed Basic Authentication for the whole ERP Instance. Note When someone uses Basic Authentication, it would be considered as access from this app. Impersonate As Community / Internal User Allowed Allows the app to request login from a community (external) or internal user. When both options are OFF, the app would not be allowed to request a user to be authenticated. This is a common scenario for service applications with no UI. If any or both options are ON, the app is allowed to impersonate, e.g. request login. The login would be successful only if the authenticated user is of one of the allowed types. Common scenarios: Service app - both options OFF. Internal interactive app - only Internal users allowed. Public web app - both Community and Internal users allowed. Note Avoid allowing only Community and disallowing Internal users. Usually, community accounts can be freely created by anybody. So, allowing only community accounts could create confusion for the internal users and force them to create a separate, external (community) account. Note It is strongly not recommended for a user to have duplicate accounts, just for the purpose of having both community and internal accounts. Impersonate Login URL This is used only for applications, which use the Authorization Code Flow. It is called after a successful login and receives the generated tokens. Usually, this URL is a dedicated endpoint in the app environment. The endpoint should conform to: https://openid.net/specs/openid-connect-core-1_0.html#AuthResponse Impersonate Logout URL Reserved for future extensions. Is Enabled Disables the access of the application. Scope The scope (according to RFC 6749 ) for which the application was trusted. The scope is an unordered list of space-delimited case-sensitive strings. Each string denotes a permission. Note Currently, this option is ignored. The following token scopes are PLANNED for near future developments: update Allows the user application to update data in the ERP Instance. Without this scope, the application can only read data. sec Allows the application to access the security infrastructure of the ERP Instance. Generally, this scope should NEVER be trusted to user apps. Scopes, reserved for future use: profile general crm logistics production finance personaldata System User This is the service user, which will be used to initiate sessions, when the application requests token with Client Credentials . System User Allowed Specifies whether the application is allowed to request service access. System User Login URL Reserved."
  },
  "topics/erp-instances.html": {
    "href": "topics/erp-instances.html",
    "title": "ERP Instance | ERP.net Developer Docs",
    "keywords": "ERP Instance Each tenant in the ERP.net infrastructure is called an ERP Instance. General info When a client creates a subscription with the ERP.net service, they get an ERP Instance. A single account can create and manage more than one ERP Instance. This might be required for testing, validation or other purposes. Note A single ERP Instance can manage multiple legal entities (companies). Under the hood, each ERP Instance is managed as a single database. For this reason, the terms ERP Instance and database are sometimes used interchangeably. The proper term is ERP Instance, since this is more abstract and not related to any underlying technology. The ERP Instances are provided as a service from the ERP.net infrastructure and the actual storage is undistinguishable to the end user. UIN Each ERP Instance has a Unique Instance Name (UIN) or simply name. For example, the demonstration database is named \"demodb\". Root URL The ERP Instances are accessible through their root URL address. The root URL address is https://<<UIN>>.my.erp.net For example, the root URL of demodb is: https://demodb.my.erp.net You can go ahead and click that address. It opens the home page of the ERP Instance. For security reasons, it does not give access to much else than some general info and public downloads. The root URL is usually also used as base address for the instance-related web sites. For example, demodb has several web sites active. One of the sites is the Domain API site, available at: https://demodb.my.erp.net/api Note The web sites can be hosted at custom URL addresses. Using the Root URL is just a default."
  },
  "topics/index.html": {
    "href": "topics/index.html",
    "title": "Introduction | ERP.net Developer Docs",
    "keywords": "Introduction Explore the ERP.net developer documentation to quickly learn how to build great integrations with the platform. ERP Instances Each ERP database is an instance. To learn more, see ERP Instances . Choose application type When designing a new app, the first step is to choose which authentication type and API should be used. To simplify this, we have compiled a list of common application types . Authentication All APIs in ERP.net use the same authentication mechanism, based on OAuth2. To understand authentication, see Authentication . Select API Choose the correct API: Domain API - Object oriented API, based on the Domain Model . The main API for processing data by web sites, services and other business logic apps. Table API - Limited purpose read-only, fast-forward API based on the raw table data model. Intended for Business Intelligence and backup apps, requiring fast dumping of big quantities of raw data. Data Access API - Legacy API, exposing table-based methods for retrieving and manipulating data. Not documented and not recommended for new developments."
  },
  "topics/table-api/index.html": {
    "href": "topics/table-api/index.html",
    "title": "Table API | ERP.net Developer Docs",
    "keywords": "Table API The primary purpose of the Table API is to allow external BI (Business Intelligence) tools to quickly pull raw data for further analysis. Authentication It is common for Table API consumers to use the Basic Authentication. For more information, see Authentication . Tables For information about the tables, which can be queried, see the Table Model ."
  }
}